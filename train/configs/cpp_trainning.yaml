data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.dataset
        class: MatchingDataset
        MatchingDataset:
          dirname: "'datasets/HSD/CPP_85_Switzerland/train'"
          classes:
            "1_CPP_Page1": 0
            "2_CPP_Page2": 1
            "3_CPP_Date": 2
            "4_CPP_Composition": 3
          image_size: (512, 512)
          image_patterns:
            ["'*.jpg'", "'*.png'", "'*.jpeg'", "'*.JPG'", "'*.PNG'", "'*.JPEG'"]
          device: '''cpu'''
          return_triplets: False
          get_triplets_func: triplet.TripletUtils.random_triplets
          num_channel: 1
          transforms:
            prev_transforms: []
            main_transforms:
              - iaa.MotionBlur()
              - iaa.ChangeColorTemperature()
              - iaa.GaussianBlur(sigma=(0, 1))
              - iaa.Grayscale(alpha=(0.0, 1.0))
              - iaa.Add(value=(-50, 50), per_channel=True)
              - iaa.Crop(percent=(0, 0.05))
              - iaa.Pad(percent=(0, 0.05), keep_size=False)
              - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
              - iaa.Affine(rotate=(-8, 8), shear=(-2, 2), fit_output=True)
            post_transforms:
              - iaa.PadToSquare(position='center')
              - iaa.Resize(config['data']['train']['DataLoader']['dataset']['MatchingDataset']['image_size'])
      sampler:
        module: core.data.pk_sampler
        class: PKSampler
        PKSampler:
          targets: config['data']['train']['DataLoader']['dataset'].targets
          labels_per_batch: 4
          samples_per_label: 1
      batch_size: 4*1
  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.dataset
        class: MatchingDataset
        MatchingDataset:
          dirname: "'datasets/HSD/CPP_85_Switzerland/valid'"
          classes:
            "1_CPP_Page1": 0
            "2_CPP_Page2": 1
            "3_CPP_Date": 2
            "4_CPP_Composition": 3
          image_size: (512, 512)
          image_patterns:
            ["'*.jpg'", "'*.png'", "'*.jpeg'", "'*.JPG'", "'*.PNG'", "'*.JPEG'"]
          device: '''cpu'''
          return_triplets: True
          get_triplets_func: triplet.TripletUtils.random_triplets
          num_channel: 1
          transforms:
            prev_transforms: []
            main_transforms: []
            post_transforms:
              - iaa.PadToSquare(position='center')
              - iaa.Resize(config['data']['valid']['DataLoader']['dataset']['MatchingDataset']['image_size'])
      batch_size: 4*1
      shuffle: False

model:
  module: core.model.models
  class: EmbeddingResNet
  EmbeddingResNet:
    model_name: '''resnet18'''
    num_channel: 1
    embedding_size: 128
    pretrained: True

loss:
  train_loss:
    module: core.loss.losses
    class: TripletMarginLossOnlineMining
    TripletMarginLossOnlineMining:
      margin: 0.5
      mining_type: '''online_hard_negative'''
  valid_loss:
    module: core.loss.losses
    class: TripletMarginLossOfflineMining
    TripletMarginLossOfflineMining:
      margin: 0.5

optim:
  module: core.optim.optimizers
  class: RAdam
  RAdam:
    params: config['model'].parameters()
    lr: 1e-4

trainer:
  max_epoch: 1000
  device: '''cpu'''
  checkpoint_dir: '''checkpoints'''
  resume_checkpoint_path: ''''''
  valid_frequency: 1
  early_stoping: 20

extralibs:
  torch: torch
  iaa: imgaug.augmenters
  triplet: core.data.triplet